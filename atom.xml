<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://juntingliu.github.io/</id>
    <title>Junting</title>
    <updated>2019-06-05T09:07:51.215Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://juntingliu.github.io/"/>
    <link rel="self" href="https://juntingliu.github.io//atom.xml"/>
    <subtitle>Enjoy your life with your heart. Self-discipline gives me freedom.</subtitle>
    <logo>https://juntingliu.github.io//images/avatar.png</logo>
    <icon>https://juntingliu.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Junting</rights>
    <entry>
        <title type="html"><![CDATA[块级作用域绑定]]></title>
        <id>https://juntingliu.github.io//post/kuai-ji-zuo-yong-yu-bang-ding</id>
        <link href="https://juntingliu.github.io//post/kuai-ji-zuo-yong-yu-bang-ding">
        </link>
        <updated>2019-06-04T09:02:10.000Z</updated>
        <summary type="html"><![CDATA[<p>知识点梳理，最近开始阅读《深入理解 ES6》，给自己一点动力，看完一章同步更新一片阅读笔记。</p>
]]></summary>
        <content type="html"><![CDATA[<p>知识点梳理，最近开始阅读《深入理解 ES6》，给自己一点动力，看完一章同步更新一片阅读笔记。</p>
<!-- more -->
<h3 id="var-声明及变量提升hoisting-机制">var 声明及变量提升（Hoisting） 机制</h3>
<p>ES6 之前 <code>JavaScript</code> 只有&quot;函数作用域”和“全局作用域”，通过关键字 <code>var</code> 声明变量，无论在哪里声明的，都会被当成在当前作用域顶部声明的变量，这就是常说的提升（Hoisting）机制。</p>
<pre><code class="language-javascript">function getValue(condition) {
  //var value; // 实际执行时（JavaScript 预编译阶段） var 声明提升到函数作用域顶部
  if (condition) {
    // value = &quot;blue&quot;; // 实际执行时，初始化动作还是留在了这里
    var value = &quot;blue&quot;;
   	return value;
  } else {
    // console.log(value); // undefined ，这里还是可以访问到 value 的，值为 undefined
    return null
  }
}
</code></pre>
<h3 id="块级声明">块级声明</h3>
<p>块级声明（<code>let</code>,<code>const</code>）用于声明在指定块级的作用域之外无法访问的变量，块级作用域（亦称为词法作用域）。</p>
<ul>
<li>函数内部</li>
<li>块中（字符 { 和 } 之间的区域）</li>
<li>禁止重复声明</li>
</ul>
<pre><code class="language-javascript">function getValue(condition) {
  if (condition) {
    	let value = &quot;blue&quot;;
    	return value;
  } else {
    // 变量 value 在此处不存在
    return null;
  }
  // 变量 value 在此处不存在
}
</code></pre>
<p><code>const</code> 关键字声明常量，其值一旦被设定后不可更改，每个通过 <code>const</code> 声明的常量必须进行初始化，否则会报语法错误。<code>const</code> 常量不可变说的是不能更改绑定的值，如果赋值的是一个对象，对象里的属性值还是可以修改的。</p>
<pre><code class="language-javascript">const obj = { name: 'Junting' };

obj.name = 'Jt'; // OK

// 抛出语法错误
obj = { name: 'Junting' }; 
</code></pre>
<h3 id="临时死区temporal-dead-zone-tdz">临时死区（Temporal Dead Zone ,TDZ）</h3>
<p>与 <code>var</code> 不同，<code>let</code> 和 <code>const</code> 声明的变量不会被提升到作用域顶部，在声明变量前访问这些变量就会报语法错误，即使是相对安全的 <code>typeof</code> 操作符也会触发引用错误。<code>JavaScript</code>  引擎在扫描代码发现变量声明时，要么将它们提升至作用域顶部（var 声明），要么将声明放到 <code>TDZ</code> 中（遇到 <code>let</code> 和 <code>const</code> 声明）。访问 TDZ 中的变量会触发运行时错误，只有在执行过变量声明语句后，变量才会从 <code>TDZ</code> 中移除，然后方可正常访问。</p>
<pre><code class="language-javascript">console.log(typeof value); // &quot;undefined&quot;, 在 let 声明块级作用域外，访问则不会报错

if (true) {
  // console.log(typeof value); // 语法报错
	let value = &quot;blue&quot;;
}
</code></pre>
<h3 id="循环中的块级作用域绑定">循环中的块级作用域绑定</h3>
<pre><code class="language-javascript">// ES6 之前
for (var i = 0; i &lt; 10; i++) {
  // ...
}
// 在循环外还是可以访问到 i
console.log(i)

// ES6 之后
for (let i = 0; i &lt; 10; i++) {
  // ...
}
// i 不可访问，抛出一个错误
console.log(i)
</code></pre>
<p>循环中的函数</p>
<pre><code class="language-javascript">var funcs = [];

for (var i = 0; i &lt; 10; i++) {
	funcs.push(function () {
		console.log(i)
	})
}

funcs.forEach(function (func) {
  func(); // 输出 10 个数字 10，和理想的输出 0 - 9 不一致
})
</code></pre>
<p>过去的解决办法，通过使用闭包知识来进行</p>
<pre><code class="language-javascript">var funcs = [];
for (var i = 0; i &lt; 10; i++) {
	funcs.push((function (value) {
    return function () {
      console.log(value)
    }
	}(i)))
}

funcs.forEach(function (func) {
  func(); // 输出  0 - 9
})
</code></pre>
<p>ES6 就更简单了</p>
<pre><code class="language-javascript">var funcs = [];
for (let i = 0; i &lt; 10; i++) {
	funcs.push((function () {
      console.log(value)
    })
}

funcs.forEach(function (func) {
  func(); // 输出  0 - 9
})
</code></pre>
<p>循环中的 let 声明，会每次迭代循环都会创建一个新的变量，并以之前迭代中同名变量的值将其初始化。</p>
<blockquote>
<p>注意：let 声明在循环内部的行为时标准中专门定义的，它不一定与 <code>let</code> 的不提升特性相关，理解这一点尤为重要。事实上，早期的 <code>let</code> 实现不包含这一行为，它是后来加入的。</p>
</blockquote>
<p><strong>循环中的 const 声明</strong></p>
<p>对于普通的 for 循环来说，使用 <code>const</code> 在第一次迭代初始化时使用 <code>const</code> 不会报错，但是在下一次迭代修改其绑定值时就会抛出错误。</p>
<pre><code class="language-javascript">for (const i = 0; i &lt; 10; i++) {
	// ...
}
</code></pre>
<p>在 <code>for-in</code> 活 <code>for-of</code>  循环中使用 <code>const</code> 时的行为就与 <code>let</code> 一致了。</p>
<pre><code class="language-javascript">var funcs = [],
    obj = {
      a: 1,
      b: 2,
      c: 3
    };

for (const key in obj) {
  funcs.push(function() {
    console.log(key);
  })
}

funcs.forEach(function (func) {
	console.log(func()); // a b c
})
</code></pre>
<p>这段代码中的函数与 &quot;循环中的 let 声明&quot; 一至，唯一的区别就是循环内不能更改 <code>key</code> 的值。</p>
<h3 id="全局块作用域绑定">全局块作用域绑定</h3>
<p><code>var</code> 关键字在全局作用域下声明的变量，会作为全局对象 <code>window</code> (浏览器下) 的属性，也就意味会覆盖 <code>window</code> 自身的一些全局属性。</p>
<pre><code class="language-javascript">var RegExp = &quot;hello&quot;;
console.log(window.RegExp); // &quot;hello&quot;

var test = &quot;Junting&quot;;
window.test; // &quot;Junting&quot;
</code></pre>
<p>而使用 <code>let</code> 和 <code>const</code> 在全局作用域下 声明变量，会在全局作用域下创建一个新的绑定，但改绑定不会添加到全局对象的属性上。换句话说，用 <code>let</code> 和 <code>const</code> 声明不能覆盖全局变量，而只能遮蔽它。</p>
<pre><code class="language-javascript">let RegExp = &quot;test&quot;;
console.log(RegExp); // &quot;test&quot;
console.log(window.RegExp === RegExp); // false
</code></pre>
<h3 id="最佳实践">最佳实践</h3>
<p>定义声明变量时，默认使用 <code>const</code> ，只有确定需要改变变量的值时使用 <code>let</code>。</p>
]]></content>
    </entry>
</feed>